name: Create GCP Infrastructure

on:
  push:
    branches:
      - master
  workflow_dispatch:
  pull_request:

env:
  GCP_PROJECT: ${{ secrets.PROJECT_ID }}
  BUCKET_NAME: "${{ secrets.PROJECT_ID }}-tfstate"
  SA_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

jobs:
  create-gcp-bucket:
    name: 'GCP Bucket Creation'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        project_id: ${{ secrets.PROJECT_ID }}
        export_default_credentials: true 
    
    - name: 'Create Bucket & Enable Object Versioning'
      run: |-
        gsutil mb gs://"$BUCKET_NAME" || echo "Bucket Already Exists"
        gsutil versioning set on gs://"$BUCKET_NAME" || echo "Versioning Already Enabled"
  
  terraform:
    name: 'Terraform'
    needs: 'create-gcp-bucket'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    
    # Terraform fmt
    - name: Terraform Format
      id: fmt
      run: |-
        cd src/
        terraform fmt -check -diff

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |-     
        cd src/
        terraform init -backend-config 'credentials=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' -backend-config "bucket=$BUCKET_NAME"
   
    # Valdate the configuration files in a directory
    - name: Terraform Validate
      id: validate
      run: |-
        cd src/
        terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: |-
        cd src/
        terraform plan -var "credentials=$SA_CREDENTIALS" -var "project=$GCP_PROJECT" -var "bucket=$BUCKET_NAME" -no-color
      continue-on-error: true

    - name: Terraform Status
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            <details><summary>Show Plan</summary>
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
              
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1


      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |-
        cd src/
        terraform apply -var 'credentials=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' -var "project=$GCP_PROJECT" -var "bucket=$BUCKET_NAME" -auto-approve
